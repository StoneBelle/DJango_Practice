# WHAT IS A VIEW?
# views are python functions or classes
# they receive a web request and return a web response
    # e.g. HTTP response, HTML template, HTTP redirect 
    

# Views dictate WHAT info is being shown to client 
# Urls dictate WHERE info is shown on the website 

# Views need to be routed (i.e. paired) to a url in order to to create the web page(s) on a website

# You can connect an app lvl url to a project lvl url through the use ofthe following django functions:
    # path()
    # include()

# All view routes are defined in a list called "urpatterns"


# CONNECT A VIEW TO A URL VIA path():

# 1st required path arg:
    # route: str code that contains the url pattern
    # When route is passed in, django will search the urlpatterns list (which stores all str routes), for a match
# 2nd require path arg
    #view 
    #Once a matching route is found the view arg connects to a func/view that is often defined in the views.py file of the relevant Django app

# Optional args:
	# Kwargs - Allows us to pass in keyword arguments as a dictionary to the view  
	# Name - allows us to name a url in order to reference it elsewhere in Django
 
	

# DYNAMIC VIEWS & LOGIC
# 2 key ideas:
# Adding logic to to a view (i.e. adding actual py code to a view as opposed to a http response)

# Creating Dynamic Paths
    #I.e. having the actual URL Path Routes defined by the client

# PATH CONVERTERS

##### for path converters and dynamic views check the my_app/views.py and my_app/urls.py #####

# REDIRECTS
# Occasionally a client user will provide path that we want to redirect to another webpage on our site
# HttpResponseRedirect() helps us accomplish that


# REVERSE URLS & URL NAMES
# useful for when our website becomes larger and needs to reference existing pages(URLs across our website)

# URL Paths inside the path() function can have names that can be referenced across Django and inside of a template
# Django has a reverse() function to find corresponding URL path for a URL name


## 1:30 Lecture 56 

# CONNECTING VIEWS TO TEMPLATES

# templates are HTML files
# not ideal to manually type out HTMl code/HTTP Responses inside views.py file
# rather we aim to separate our templates into a separate directory and have views communicate between this directory and render the templates

# connecting to a template directory requires us to inform the Django project settings where to find these templates
# ideal way of doing is this is storing the templates within the app level as opposed to project lvl
# check 10:40 Lecture 57

